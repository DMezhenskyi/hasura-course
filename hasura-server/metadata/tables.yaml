- table:
    schema: public
    name: cities
  select_permissions:
    - role: anonymous
      permission:
        columns:
          - id
          - name
        filter: {}
    - role: user
      permission:
        columns:
          - id
          - name
        filter: {}
- table:
    schema: public
    name: comments
  remote_relationships:
    - definition:
        remote_field:
          firebase_user_profile:
            arguments:
              id: $user_id
        hasura_fields:
          - user_id
        remote_schema: firebase_user_profile
      name: firebase_user_profile
  insert_permissions:
    - role: user
      permission:
        check: {}
        set:
          user_id: x-hasura-User-Id
        columns:
          - comment
          - photo_id
        backend_only: false
  select_permissions:
    - role: user
      permission:
        columns:
          - comment
          - user_id
          - created_at
          - id
          - photo_id
        filter: {}
        allow_aggregations: true
  update_permissions:
    - role: user
      permission:
        columns:
          - comment
        filter:
          user_id:
            _eq: X-Hasura-User-Id
        check:
          user_id:
            _eq: X-Hasura-User-Id
  delete_permissions:
    - role: user
      permission:
        filter:
          user_id:
            _eq: X-Hasura-User-Id
  event_triggers:
    - name: notify_about_comment
      definition:
        enable_manual: false
        insert:
          columns: "*"
      retry_conf:
        num_retries: 0
        interval_sec: 10
        timeout_sec: 60
      webhook: http://host.docker.internal:5001/hasura-course/us-central1/notifyAboutComment
- table:
    schema: public
    name: photos
  object_relationships:
    - name: city
      using:
        foreign_key_constraint_on: city_id
  array_relationships:
    - name: comments
      using:
        foreign_key_constraint_on:
          column: photo_id
          table:
            schema: public
            name: comments
  remote_relationships:
    - definition:
        remote_field:
          firebase_user_profile:
            arguments:
              id: $user_id
        hasura_fields:
          - user_id
        remote_schema: firebase_user_profile
      name: firebase_user_profile
  insert_permissions:
    - role: user
      permission:
        check: {}
        set:
          user_id: x-hasura-User-Id
        columns:
          - description
          - photo_url
        backend_only: false
  select_permissions:
    - role: anonymous
      permission:
        columns:
          - id
          - photo_url
          - description
          - created_at
          - updated_at
          - user_id
        filter: {}
        allow_aggregations: true
    - role: user
      permission:
        columns:
          - created_at
          - description
          - id
          - is_published
          - photo_url
          - updated_at
          - user_id
        filter: {}
        allow_aggregations: true
  update_permissions:
    - role: user
      permission:
        columns:
          - description
          - is_published
        filter:
          user_id:
            _eq: X-Hasura-User-Id
        check:
          user_id:
            _eq: X-Hasura-User-Id
  delete_permissions:
    - role: user
      permission:
        filter:
          user_id:
            _eq: X-Hasura-User-Id
